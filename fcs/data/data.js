var data = 
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1593,0,0,0,0,0,0,0,0,589,0,0,589,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1593,1593,0,367,0,0,0,0,589,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1593,0,0,367,0,367,0,589,0,0,0,0,0,0,0,0,0,0,1531,1531,988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1593,0,1593,1593,367,367,0,367,367,0,0,0,0,0,0,0,0,0,0,1531,1531,988,988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1319,367,367,367,0,0,0,0,0,0,0,0,0,0,1531,0,0,1531,0,988,0,988,0,636,0,636,636,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1488,0,0,0,0,0,1319,1319,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,988,0,988,988,988,636,636,636,636,0,0,0,0,681,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1488,0,0,0,0,0,0,0,1319,0,1319,0,0,0,0,0,0,0,0,0,0,0,436,0,0,988,0,988,0,0,0,0,0,636,636,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1488,1488,0,0,0,1319,1319,0,0,0,0,0,0,0,1539,1539,0,436,436,436,0,0,0,988,98,0,0,636,0,0,0,0,914,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,429,0,0,0,0,659,659,0,0,0,1319,0,0,0,0,0,0,1539,1539,0,1539,0,436,0,0,0,98,98,0,0,0,0,636,914,914,914,914,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1190,1539,1539,0,1539,1539,0,436,436,436,98,98,98,98,0,1267,0,1267,914,914,914,0,0,0,0,0,0,0,681,1388,0,0,1388,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,429,429,0,0,0,0,0,659,659,659,0,0,0,0,0,0,1190,1190,0,1539,1539,1539,0,0,1186,1186,436,0,0,98,98,0,1267,0,1267,1267,914,914,914,0,0,0,0,0,0,0,1388,1388,1388,1388,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,429,0,0,0,1149,659,659,659,0,517,517,0,517,0,0,1190,1190,1190,1190,1190,1539,1186,1186,1186,1186,1186,0,0,98,98,98,0,1267,1267,1267,1267,914,0,914,0,0,0,0,0,0,1388,1388,1388,1388,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1149,0,1149,659,0,0,0,517,0,0,0,0,1190,0,1190,1190,1190,0,0,1186,0,0,1186,0,0,0,0,98,1267,1267,1267,1267,1267,0,0,0,793,0,0,0,0,0,0,1388,1388,1388,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1149,1149,1149,1149,0,986,986,517,517,517,0,0,0,0,0,0,1190,0,0,0,0,1186,1186,0,191,0,0,0,0,1077,1267,1267,1267,793,793,793,0,793,0,0,0,0,0,1072,0,1388,1388,1388,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1149,1149,0,1149,1149,986,0,986,0,517,517,0,0,0,0,0,0,1184,0,0,0,0,1186,191,191,0,0,0,0,1077,1077,1077,0,0,489,489,793,0,793,0,0,0,0,0,1072,0,1072,0,1072,0,519,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1149,1149,1149,986,986,0,0,0,0,0,411,0,411,0,0,1184,882,0,882,0,191,191,191,191,191,1077,1077,1077,1077,1077,0,0,489,489,489,0,793,0,0,0,0,1072,0,1072,1072,0,0,519,0,519,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,168,0,168,1149,0,986,986,0,0,986,411,411,0,411,0,0,0,0,882,882,882,0,0,0,0,191,191,0,1077,0,1077,1077,0,489,489,489,489,489,0,0,0,0,0,1072,1072,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,297,168,168,168,168,168,986,0,0,986,133,411,411,411,411,411,74,0,0,882,882,882,882,882,396,396,396,396,0,1077,1077,0,1077,0,489,489,489,489,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,297,297,168,168,168,0,0,0,106,133,133,133,133,411,411,0,74,74,74,0,0,0,882,0,0,396,0,396,396,0,0,5,5,5,101,101,489,0,0,0,0,0,0,0,0,0,0,125,125,125,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,168,168,168,168,106,106,106,133,133,133,133,133,411,0,74,74,74,0,0,882,882,1286,1286,396,396,396,396,5,5,5,5,5,101,101,0,0,0,0,424,0,424,0,0,125,0,0,125,0,0,519,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,297,0,297,168,168,0,0,0,106,0,133,0,0,133,0,74,74,74,74,0,0,0,1286,1286,1286,1286,0,396,396,5,5,5,5,101,101,101,0,0,0,0,424,0,424,424,0,0,0,125,125,125,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,297,297,297,168,106,106,106,106,106,133,133,133,133,133,596,596,596,596,74,0,0,0,0,1286,1286,1286,1286,396,0,5,5,5,5,101,101,101,101,0,0,0,424,424,0,0,0,0,125,0,0,1568,1568,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1611,1611,1611,1611,1611,0,106,106,106,874,874,874,0,0,596,596,596,0,0,0,0,0,1286,1286,1286,1286,1286,404,404,404,404,5,1536,0,101,0,101,0,0,424,0,424,0,0,706,706,0,0,1568,0,1568,1568,1568,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1611,0,1611,1611,1611,0,1413,0,106,874,874,874,874,874,596,596,596,596,596,1274,1274,1274,1274,1286,1286,1286,0,0,0,404,0,0,1536,1536,1536,0,0,0,424,0,0,0,706,706,706,706,0,1568,1568,0,0,1568,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,1611,1611,1611,1611,1611,1413,1413,0,1413,0,874,874,0,874,596,596,596,596,596,1274,1274,1274,0,1274,0,0,0,0,0,0,0,0,1536,0,1536,0,0,0,0,0,0,706,706,706,706,0,0,0,1568,1568,1568,1568,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,495,0,1611,1611,1611,1611,1413,1413,1413,0,1413,874,874,874,874,874,0,0,596,0,19,1274,1274,1274,0,0,0,1526,1526,1526,1526,404,1536,1536,1536,1536,1536,0,0,0,1229,1229,1229,1229,706,706,706,0,0,0,1568,1568,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1611,1611,0,1413,1413,1413,1413,0,0,0,0,0,0,0,0,0,19,19,19,1274,1274,0,0,1526,1526,1526,1526,1526,1526,0,0,1536,0,1630,0,0,0,1229,0,0,1229,1229,706,706,706,0,0,0,983,0,983,0,0,0,0,0],
[0,0,0,0,0,0,0,0,849,0,0,0,495,0,0,0,0,1413,0,0,1541,0,0,0,0,0,0,19,19,19,19,19,1274,1274,0,1526,1526,1526,1526,1526,0,0,207,207,0,1630,1630,0,0,0,0,1229,0,0,706,0,0,0,0,0,983,0,983,0,0,0,0,0],
[0,0,0,0,0,0,0,0,849,849,849,0,0,0,0,0,0,0,0,0,0,0,0,0,570,570,570,19,19,19,19,19,0,1004,1004,1004,1526,1526,1526,922,922,922,207,207,207,1630,1630,0,0,0,0,1229,1229,0,0,0,0,0,0,983,983,983,983,0,0,1008,0,0],
[0,0,0,0,0,0,0,849,849,0,849,849,0,0,0,0,0,0,0,0,0,1541,1541,570,570,570,570,570,19,19,835,835,1004,1004,0,1004,0,922,922,922,922,922,207,0,207,207,0,0,0,0,0,0,1396,0,0,0,0,0,0,983,983,0,983,0,1008,0,0,0],
[0,0,0,0,0,0,0,849,849,0,849,0,0,0,0,0,0,0,0,0,616,616,616,570,570,570,570,570,835,835,835,835,1004,0,1004,1004,1004,0,922,922,922,922,207,207,0,0,0,0,0,0,1396,1396,1396,1396,0,0,0,0,0,0,983,0,983,23,23,0,0,0],
[0,0,0,0,0,0,422,422,849,849,1098,1098,0,0,0,0,0,0,0,528,616,616,616,570,570,570,570,570,835,835,835,835,835,1004,1004,1004,0,0,922,922,922,922,207,207,0,0,1610,0,0,0,1396,1396,0,1159,1159,0,0,0,0,0,0,0,0,23,23,23,0,0],
[0,0,0,0,0,422,422,422,0,422,1098,1098,1098,1098,1098,0,528,528,528,528,0,616,616,616,570,570,570,570,835,835,835,835,835,0,1004,1004,867,867,867,922,922,973,973,0,0,0,1610,1610,0,1120,1396,0,0,1159,1159,1159,1159,0,789,0,0,0,0,23,23,23,0,0],
[0,0,0,0,0,422,422,422,0,0,1098,1098,1098,1098,529,529,528,528,528,528,616,616,616,616,0,713,713,713,713,835,835,835,130,0,867,867,0,867,867,973,973,973,973,0,0,0,0,1120,1120,1120,0,0,0,1159,1159,1159,1159,789,789,789,0,0,0,23,23,23,0,0],
[0,0,0,0,0,1089,422,0,0,0,0,1098,1098,529,529,529,0,528,528,528,616,616,616,616,713,713,713,713,713,130,130,130,130,130,347,347,0,0,867,0,0,0,973,0,0,0,0,1120,0,0,0,0,0,1159,1159,1159,789,0,789,789,0,0,23,23,23,23,0,0],
[0,0,0,0,1089,1089,0,0,0,0,0,1451,1451,529,529,529,529,529,0,0,361,361,7,7,713,713,713,713,713,130,130,0,130,347,347,347,347,0,867,0,0,0,973,1525,1525,1525,1525,1120,1120,1120,1120,0,697,697,0,789,789,789,789,789,256,256,256,1181,1181,0,0,0],
[0,0,1089,1089,1089,1089,0,0,0,0,0,1451,1451,0,529,529,529,529,361,361,361,361,7,7,7,713,713,713,0,0,130,130,0,347,347,347,347,347,0,0,0,0,0,1525,1525,1525,1525,663,663,0,0,697,697,697,697,0,789,789,789,789,0,0,256,1181,1181,0,0,0],
[0,0,1089,1089,1089,1089,0,0,0,0,0,1451,1451,1451,529,529,0,0,361,361,361,361,7,7,7,7,713,63,63,63,130,0,0,347,347,347,347,347,0,0,0,111,0,0,1525,1525,1525,663,663,663,663,0,697,0,697,431,431,1002,0,1002,0,256,0,0,1181,0,0,0],
[0,0,0,1089,1320,0,0,0,0,0,1451,1451,1451,1451,0,0,0,0,361,361,361,361,0,7,7,7,63,63,63,0,0,0,0,0,0,347,0,35,0,0,0,111,111,1525,1525,1525,1525,663,0,663,0,697,697,697,0,431,431,1002,1002,1002,1002,0,0,1181,1181,0,0,0],
[0,0,0,1320,1320,1320,1320,1320,1204,1204,1204,0,0,0,0,0,0,0,0,135,361,361,7,1595,1595,1595,63,63,63,0,0,0,159,159,159,35,35,35,35,0,0,111,0,0,0,1525,967,967,663,663,0,524,0,431,431,431,431,1002,1002,1002,0,0,0,0,0,0,0,0],
[0,0,0,1320,1320,1320,1320,1320,1204,1204,1204,1204,0,1171,0,0,0,1440,135,135,135,0,1595,1595,1595,1595,1595,63,63,63,159,159,159,159,159,35,35,35,35,35,111,1197,1197,1197,1197,967,967,967,967,967,524,524,0,524,431,431,431,1002,1002,1002,80,80,80,80,0,0,0,0],
[0,0,0,0,0,1320,1320,1320,1204,1204,0,1171,1171,1171,0,1440,1440,1440,0,135,135,135,1595,1595,1595,1595,0,0,0,0,550,159,159,159,159,35,35,0,35,0,0,1197,1197,1197,1197,967,967,967,967,967,524,524,524,524,0,431,431,1002,1002,1002,80,80,80,0,0,0,0,0],
[0,0,0,0,1320,0,0,0,0,0,1204,1171,0,0,1440,1440,1440,1440,135,135,0,135,1595,1595,1595,1595,1595,550,550,0,550,159,159,0,0,35,35,0,35,35,0,0,0,1197,1197,967,967,967,967,967,524,524,524,524,0,0,575,575,575,0,80,80,0,0,0,0,0,0],
[0,0,1136,1136,1136,0,0,0,0,0,821,821,0,487,487,487,1440,0,1065,1065,1065,583,583,583,1595,947,947,947,550,550,550,0,0,0,0,0,0,0,0,0,0,0,1197,1197,1197,0,967,967,967,414,524,524,524,476,0,476,575,575,575,575,575,80,0,0,0,0,0,0],
[0,0,1136,0,0,0,0,0,821,821,821,821,487,487,487,487,487,0,1065,1065,1065,583,583,583,0,947,0,947,947,550,550,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,414,414,414,476,476,476,476,575,0,575,575,575,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,821,821,821,821,821,487,487,487,487,487,1065,1065,1065,1065,583,583,583,583,947,947,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,414,414,0,414,476,476,476,476,575,0,575,0,0,0,0,0,0,0,0,0],
[0,558,558,558,76,76,76,76,821,821,821,821,487,487,487,487,487,1065,1065,1065,0,583,583,583,0,0,947,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,414,414,414,476,476,476,476,124,0,575,0,0,0,0,0,0,0,0,0],
[0,558,558,558,76,76,76,76,76,821,821,1507,1507,487,487,0,1502,1502,1502,1065,0,0,583,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,557,0,557,557,414,0,0,0,0,124,124,124,124,0,0,0,0,0,0,0,0,0],
[0,558,558,558,76,76,76,76,76,1507,1507,1507,1507,0,1545,1545,1502,0,1502,1502,1502,712,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,557,0,557,557,0,0,0,0,124,124,0,124,0,0,0,0,0,0,0,0,0],
[0,558,558,558,76,76,76,76,1520,1520,1507,1507,0,0,1545,1545,1502,1502,0,0,1502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,557,0,557,557,0,0,0,0,124,124,124,0,0,0,0,0,0,0,0,0,0],
[311,311,0,0,1108,0,0,1520,1520,0,1520,1507,1507,1545,1545,1545,1545,1502,1502,1502,0,712,712,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0],
[0,311,1108,1108,1108,1108,1108,1520,1520,1520,1520,1520,1545,0,1545,0,1545,0,0,0,0,0,0,712,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,182,1108,1108,1108,1108,1108,1520,1520,1520,1520,1520,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,182,182,1108,1108,1108,977,0,1520,1520,1520,540,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,182,725,0,0,977,977,977,977,0,540,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,956,0,956,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,725,725,725,977,977,977,977,540,540,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,956,0,0,956,956,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,725,725,0,977,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,195,0,0,0,0,0,956,956,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,725,390,390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,195,195,0,956,956,956,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,390,390,390,1105,1105,1105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,195,0,0,195,195,956,956,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,390,1105,1105,1105,1105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,0,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,390,1105,1105,1105,1105,780,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1090,1090,0,1090,780,780,780,0,0,0,0,0,0,0,0,0,0,0,546,546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1090,1090,1090,1090,0,0,0,119,0,0,0,0,0,0,1382,1382,0,546,546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1090,1090,1090,0,0,0,119,0,0,0,0,0,0,0,1382,1382,0,546,0,0,0,0,0,0,0,0,0,0,373,373,373,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1090,0,568,568,0,119,119,0,0,0,0,0,1382,1382,0,0,546,0,0,0,0,0,0,0,0,373,373,373,373,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,119,1223,0,1223,0,1382,117,117,0,117,0,0,0,0,0,0,0,0,0,373,373,373,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1223,1223,1223,117,117,0,117,117,0,0,0,0,0,0,0,0,373,373,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1223,117,117,117,117,0,442,0,0,0,0,0,0,0,373,373,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,442,442,0,442,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,442,442,442,442,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];

var sort = [];
for(var i = 0; i < data.length; i ++){
    for(var j = 0; j < data[i].length; j ++){
        if(sort.indexOf(data[i][j]) == -1){
            sort.push(data[i][j]);
        }
    }
}
function sortNumber(a,b){return a - b}
sort = sort.sort(sortNumber);
sort.shift();

var colors = [];
for(var i = 0; i < sort.length; i ++){
    colors.push('#' + Math.random().toString(16).substring(4).slice(0,3));
}

const L = 118.064743;
const R = 118.198504;
const B =  24.423250;
const T =  24.561485;
const DLO = (R - L) / 68;
const DLA = (T - B) / 77;

var polygons = [];
var contained = [];

function toCoordinates(i, j){
    return [L+i*DLO, T-j*DLA];
}

function isInPolygon(checkPoint, polygonPoints){
    var counter = 0;
    var xinters;
    var p1, p2;
    p1 = polygonPoints[0];

    for(var i = 1; i <= polygonPoints.length; i++) {
        p2 = polygonPoints[i % polygonPoints.length];
        if(checkPoint[0] > Math.min(p1[0], p2[0]) && checkPoint[0] <= Math.max(p1[0], p2[0])){
            if(checkPoint[1] <= Math.max(p1[1], p2[1])){
                if(p1[0] != p2[0]){
                    xinters = (checkPoint[0] - p1[0]) * (p2[1] - p1[1]) / (p2[0] - p1[0]) + p1[1];
                    if(p1[1] == p2[1] || checkPoint[1] <= xinters){
                        counter++;
                    }
                }
            }
        }
        p1 = p2;
    }
    if(counter % 2 == 0) return false;
    else return true;
}

function left(k, pn, x, y, sx, sy){
    if(x == sx && y == sy){
        return;
    }
    switch(sort[k]){
        case data[y-1][x-1]:
            polygons[k][pn].push(toCoordinates(x, y-1));
            up(k, pn, x, y-1, sx, sy);
            break;
        case data[y][x-1]:
            polygons[k][pn].push(toCoordinates(x-1, y));
            left(k, pn, x-1, y, sx, sy);
            break;
        default:
            polygons[k][pn].push(toCoordinates(x, y+1));
            down(k, pn, x, y+1, sx, sy);
    }
}

function right(k, pn, x, y, sx, sy){
    if(x == sx && y == sy){
        return;
    }
    switch(sort[k]){
        case data[y][x]:
            polygons[k][pn].push(toCoordinates(x, y+1));
            down(k, pn, x, y+1, sx, sy);
            break;
        case data[y-1][x]:
            polygons[k][pn].push(toCoordinates(x+1, y));
            right(k, pn, x+1, y, sx, sy);
            break;
        default:
            polygons[k][pn].push(toCoordinates(x, y-1));
            up(k, pn, x, y-1, sx, sy);
    }
}

function up(k, pn, x, y, sx, sy){
    if(x == sx && y == sy){
        return;
    }
    switch(sort[k]){
        case data[y-1][x]:
            polygons[k][pn].push(toCoordinates(x+1, y));
            right(k, pn, x+1, y, sx, sy);
            break;
        case data[y-1][x-1]:
            polygons[k][pn].push(toCoordinates(x, y-1));
            up(k, pn, x, y-1, sx, sy);
            break;
        default:
            polygons[k][pn].push(toCoordinates(x-1, y));
            left(k, pn, x-1, y, sx, sy);
    }
}

function down(k, pn, x, y, sx, sy){
    if(x == sx && y == sy){
        return;
    }
    switch(sort[k]){
        case data[y][x-1]:
            polygons[k][pn].push(toCoordinates(x-1, y));
            left(k, pn, x-1, y, sx, sy);
            break;
        case data[y][x]:
            polygons[k][pn].push(toCoordinates(x, y+1));
            down(k, pn, x, y+1, sx, sy);
            break;
        default:
            polygons[k][pn].push(toCoordinates(x+1, y));
            right(k, pn, x+1, y, sx, sy);
    }
}

var waitToInsert = [];
function insert(i,k,pn){
    n = waitToInsert[i][0]+5*i;
    x = waitToInsert[i][1];
    y = waitToInsert[i][2];
    temp = polygons[k][pn][n];
    polygons[k][pn].splice(n, 0, toCoordinates(x,y));
    polygons[k][pn].splice(n, 0, toCoordinates(x,y+1));
    polygons[k][pn].splice(n, 0, toCoordinates(x+1,y+1));
    polygons[k][pn].splice(n, 0, toCoordinates(x+1,y));
    polygons[k][pn].splice(n, 0, toCoordinates(x,y));
    polygons[k][pn].splice(n, 0, temp);
    if(i+1 < waitToInsert.length){
        insert(i+1,k,pn);
    }
}

function npolygon(k, pn){
    flag = 0;
    l = 100;
    t = 100;
    r = 0;
    b = 0;
    sx = 100;
    sy = 100;
    for(var i = 0; i < data.length; i ++){
        for(var j = 0; j < data[i].length; j ++){
            if(data[i][j] == sort[k] && contained.indexOf([j,i].toString()) == -1){
                if(i < t){
                    t = i;
                    sx = j;
                    sy = i;
                }
                if(j < l) l = j;
                if(i > b) b = i;
                if(j > r) r = j;
            }
        }
    }
    polygons[k].push([]);
    polygons[k][pn].push(toCoordinates(sx, sy));
    polygons[k][pn].push(toCoordinates(sx, sy+1));
    down(k, pn, sx, sy+1, sx, sy);
    waitToInsert = [];
    for(var i = 0; i < data.length; i ++){
        for(var j = 0; j < data[i].length; j ++){
            if(data[i][j] == sort[k] && contained.indexOf([j,i].toString()) == -1){
                if(isInPolygon(toCoordinates(j+0.5,i+0.5),polygons[k][pn])){
                    contained.push([j,i].toString());
                }
                else{
                    flag = 1;
                }
            }
            else{
                if(isInPolygon(toCoordinates(j+0.5,i+0.5),polygons[k][pn])){
                    for(var n = 0; n < polygons[k][pn].length; n++){
                        if(L+j*DLO == polygons[k][pn][n][0]){
                            waitToInsert.push([n, j, i]);
                            break;
                        }
                    }
                }
            }
        }
    }
    if(waitToInsert.length > 0){
        insert(0,k,pn);
    }
    // console.log(k,pn,polygons[k][pn]);
    if(flag){
        npolygon(k,pn+1);
    }
}

for(var k = 0; k < sort.length; k ++){
    polygons.push([]);
    npolygon(k, 0);
}

var events = [
{'event':'9月8日厦门单双号限行','detail':'9月8号7:00-18:00思明区、湖里区实行机动车单双号限制通行措施。公交车、出租车、公路客运、旅游客运车辆以及20座以上（含20座）大客车不受单、双号限制行驶。','date':08,'effect':[23,80,117,124,135,297,414,429,476,529,558,575,583,725,789,849,977,1098,1181,1204,1388,1545]},
{'event':'98中国国际投资贸易洽谈会','detail':'(1)2016年第十二届中国国际投资贸易洽谈会。（2）2016厦门海外置业投资移民展览会。','date':08,'effect':[80,476,575]},
{'event':'98中国国际投资贸易洽谈会','detail':'(1)2016年第十二届中国国际投资贸易洽谈会。（2）2016厦门海外置业投资移民展览会。','date':09,'effect':[80,476,575]},
{'event':'98中国国际投资贸易洽谈会','detail':'(1)2016年第十二届中国国际投资贸易洽谈会。（2）2016厦门海外置业投资移民展览会。','date':10,'effect':[80,476,575]},
{'event':'98中国国际投资贸易洽谈会','detail':'(1)2016年第十二届中国国际投资贸易洽谈会。（2）2016厦门海外置业投资移民展览会。','date':11,'effect':[80,476,575]},
{'event':'厦大学生开学返校','detail':'厦门大学在校生暑假最后一天学生返校','date':09,'effect':[1382]},
{'event':'高中住宿学生返校','detail':'学区分布有厦门第二中学高中部，属于住宿学校，学生在周日下午返校','date':12,'effect':[636]},
{'event':'厦大对游客开放日','detail':'厦门大学对游客开放日','date':12,'effect':[568]},
{'event':'中秋放假前期出行客流量升高','detail':'中秋放假前期出行客流量升高','date':14,'effect':[583,1286,1595]},
{'event':'动车停运','detail':'由于台风影响，厦门动车停运，枋湖客运站客流量明显上升','date':15,'effect':[1286]},
{'event':'莫兰蒂台风登陆厦门','detail':'莫兰蒂台风登陆厦门','date':15,'effect':[5,7,19,74,76,106,111,130,133,159,168,196,207,347,361,367,390,396,404,411,422,424,436,476,487,517,524,528,529,546,550,557,558,570,583,596,616,659,663,697,706,713,835,867,874,882,914,922,947,973,977,983,986,988,1004,1065,1077,1090,1098,1105,1108,1120,1149,1159,1186,1190,1197,1274,1319,1320,1396,1413,1440,1451,1502,1507,1525,1526,1531,1539,1568,1593,1611,1630]},
{'event':'客运量升高','detail':'由于台风影响，厦门动车停运，枋湖客运站客流量明显上升','date':16,'effect':[1286]},
{'event':'清扫校园','detail':'17日厦门二中校领导带领老师以及学生家长清扫校园','date':18,'effect':[636]},
{'event':'节后学生返校','detail':'中秋节学校学生返校','date':18,'effect':[638]},
{'event':'9月18号厦门限号','detail':'2016年9月18日7时至21时，禁止尾号为奇数的小客车上道路行驶，允许尾号为偶数的小客车上道路行驶','date':18,'effect':[23,80,106,117,124,311,414,529,568,725,789,849,977,1181,1204,1507,1545]},
{'event':'9月19号厦门限号','detail':'2016年9月19日7时至21时，禁止尾号为偶数的小客车上道路行驶，允许尾号为奇数的小客户上道路行驶，执行任务的特种车辆和出租车不受单双号限制行驶','date':19,'effect':[23,80,106,117,124,196,311,414,557,568,725,789,849,977,1002,1181,1204,1388,1520,1526,1545,1630]},
{'event':'2016中国会奖旅游全球论坛','detail':'2016中国会奖旅游全球论坛在海悦山庄举办','date':22,'effect':[373]},
{'event':'国际博览会','detail':'2016中国国际休闲旅游博览会，2016首届新丝路国际商品博览会','date':23,'effect':[414]},
{'event':'国际博览会','detail':'2016中国国际休闲旅游博览会，2016首届新丝路国际商品博览会','date':24,'effect':[414]},
{'event':'国际博览会','detail':'2016中国国际休闲旅游博览会，2016首届新丝路国际商品博览会','date':25,'effect':[414]},
{'event':'国家司法资格考试','detail':'国家司法资格考试占用二中五缘湾校区','date':24,'effect':[636]},
{'event':'国家司法资格考试','detail':'国家司法资格考试占用二中五缘湾校区','date':25,'effect':[636]},
{'event':'南普陀寺灾后重建后对游客开放','detail':'受台风影响，南普陀进行了修复，9月22日后对游客重新开放','date':24,'effect':[780]},
{'event':'南普陀寺灾后重建后对游客开放','detail':'受台风影响，南普陀进行了修复，9月22日后对游客重新开放','date':25,'effect':[780]},
{'event':'厦大手艺节','detail':'厦门大学举办手艺节','date':24,'effect':[1090]},
{'event':'台风鲶鱼影响','detail':'鲶鱼影响厦门','date':28,'effect':[23,74,111,117,133,182,347,431,524,616,663,697,712,713,789,983,988,1098,1120,1181,1197,1267,1320,1388,1451,1507]},
{'event':'台风影响流量升高','detail':'受台风鲶鱼影响，厦门中小幼儿园28日上午听课半天，下午正常上课。','date':28,'effect':[636,849]}]

var available = []
for(var i = 0; i < events.length; i ++){
    d = events[i].date;
    if(available.indexOf(d) == -1){
        available.push(d);
    }
}

var sortedEvent = []
for(var i = 0; i < 31; i ++){
    sortedEvent.push([]);
}
for(var i = 0; i < events.length; i ++){
    d = events[i].date;
    for(var j = 0; j < events[i].effect.length; j ++){
        e = events[i].effect[j];
        if(sortedEvent[d].indexOf(e) == -1){
            sortedEvent[d].push(e);
        }
    }
}